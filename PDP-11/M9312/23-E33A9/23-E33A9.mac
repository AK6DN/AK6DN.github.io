	.title	M9312 'XE' BOOT prom for NETWORK BOOT on a DEUNA/DELUA controller

	; This source code is an exact copy of the DEC M9312 23-E33A9 boot PROM.
	;
	; This boot PROM is for network booting on a DEUNA/DELUA ethernet interface.
	; 
	; This is ROM #2 of a two ROM set.
	;
	; Multiple units and/or CSR addresses are supported via different entry points.
	;
	; Standard devices are 82S131, Am27S13, 74S571 or other compatible bipolar
	; PROMs with a 512x4 TriState 16pin DIP architecture. This code resides in
	; the low half of the device; the top half is blank and unused.
	;
	; Alternatively, 82S129 compatible 256x4 TriState 16pin DIP devices can be
	; used, as the uppermost address line (hardwired low) is an active low chip
	; select (and will be correctly asserted low).

prtsts	=177564				; tty console printer status register
prtdat	=177566				; tty console printer data register

	.asect
	.=173000
	
	; --------------------------------------------------
	
start:	.word	<-2>			; signal this is a continuation ROM

	; --------------------------------------------------
	
rom2:	movb	(r3)+,@#prtdat		; print character from buffer

1$:	tstb	@#prtsts		; wait until done printing
	bpl	1$			; 

	dec	r4			; decrement buffer count
	bne	rom2			; loop if more to print
	br	4$			; done printing

2$:	movb	#<'->,@#prtdat		; print a dash

3$:	tstb	@#prtsts		; wait until done printing
	bpl	3$			; 
	
4$:	movb	(r5)+,r3		; get next byte, extend to word
	bic	#^c377,r3		; clear upper half
	mov	r3,r0			; save a copy
	bicb	#360,r3			; clear upper nibble of byte
	ash	#-4,r0			; shift right four bits

	cmpb	#9.,r0			; compare digit 9.
	bge	5$			; br if 9. or more
	add	#<'7>,r0		; offset by ascii '7'
	br	6$			; continue
5$:	add	#<'0>,r0		; offset by ascii '0'
6$:	movb	r0,@#prtdat		; print character

7$:	tstb	@#prtsts		; wait until done printing
	bpl	7$			;

	cmpb	#9.,r3			; compare digit 9.
	bge	8$			; br if 9. or more
	add	#<'7>,r3		; offset by ascii '7'
	br	9$			; continue
8$:	add	#<'0>,r3		; offset by ascii '0'
9$:	movb	r3,@#prtdat		; print character

10$:	tstb	@#prtsts		; wait until done printing
	bpl	10$			;

	cmp	#710,r5			; hit end of data structure?
	bne	2$			; loop if not yet

	mov	#4005,(r1)		; CLR.DONE + CMD=BOOT into device register
	mov	#2,r0			; address [2] into r0
	mov	(pc)+,(r0)+		; next word into memory [2]; bump ptr
	 br	.			; ..this instruction word
	mov	r1,(r0)			; device register address into memory [4]
	jmp	-(r0)			; jump to location [2] 

	; --------------------------------------------------
	
	.word	0,0,0			; unused

	; --------------------------------------------------
	
	.=start+176
crc16:	.word	<051553>		; CRC-16 will go here (computed=160327)

	.end
