       1                                .title	PRINTF Tester
       2                                
       3                                ; (C) 2009 Donald North. All rights reserved.
       4                                
       5                                .include "mac/stddef.mac"
       1                                ;================================================================================
       2                                ; stddef.mac - standard definitions
       3                                ; (C) 2009 Donald North. All rights reserved.
       4                                ;================================================================================
       5                                .macro	align	arg1
      16                                ;================================================================================
      17                                .macro	savreg	arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8
      28                                ;================================================================================
      29                                .macro	resreg	arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8
      40                                ;================================================================================
      41                                .macro	call	proc
      44                                .macro	return
      47                                .macro	calls	proc arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16
      67                                ;================================================================================
      68                                .macro	jeq	label ?a1
      73                                .macro	jne	label ?a1
      78                                .macro	jpl	label ?a1
      83                                .macro	jmi	label ?a1
      88                                .macro	jlo	label ?a1
      93                                .macro	jhis	label ?a1
      98                                .macro	jlos	label ?a1
     103                                .macro	jhi	label ?a1
     108                                .macro	jlt	label ?a1
     113                                .macro	jge	label ?a1
     118                                .macro	jle	label ?a1
     123                                .macro	jgt	label ?a1
     128                                .macro	jcc	label ?a1
     133                                .macro	jcs	label ?a1
     138                                .macro	jvc	label ?a1
     143                                .macro	jvs	label ?a1
     148                                ;================================================================================
     149                                .macro	printf	arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16
     152                                .macro	sprintf	arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 arg11 arg12 arg13 arg14 arg15 arg16
     155                                ;================================================================================
     156                                .macro	ipl	lvl
     161                                ;================================================================================
     162                                .macro	trapcatcher	list ?a1 ?a2 ?a3 ?a4
     176                                ;================================================================================
     177        000001                  tst$no	= 1
     178                                .macro	test	title
     198                                ;================================================================================
     199                                ; end of stddef.mac
     200                                ;================================================================================
     200                                
       6                                
       7                                ; --------------------------------------------------------------------------------
       8                                
       9                                .sbttl	general definitions
      10                                
      11                                .include "mac/bits.mac"
       1                                ;================================================================================
       2                                ; bits.mac - standard bit definitions
       3                                ;================================================================================
       4                                
       5                                ;  system global fixed addresses
       6                                
       7        177776                  psw	==177776		; processor status word
       8                                
       9        165144                  console	==165144		; console routine start
      10                                
      11        177570                  swireg	==177570		; console switch register
      12        177570                  dpyreg	==swireg		; console display register
      13                                
      14        177560                  ttrcsr	==177560		; console serial device
      15        177562                  ttrbuf	==ttrcsr+2		;
      16        177564                  ttxcsr	==ttrcsr+4		;
      17        177566                  ttxbuf	==ttrcsr+6		;
      18                                
      19                                ; common values
      20                                
      21        000015                  cr	=015			; ascii CR
      22        000012                  lf	=012			; ascii LF
      23                                
      24        000001                  bit00	=000001			; bit positions
      25        000002                  bit01	=000002			;
      26        000004                  bit02	=000004			;
      27        000010                  bit03	=000010			;
      28        000020                  bit04	=000020			;
      29        000040                  bit05	=000040			;
      30        000100                  bit06	=000100			;
      31        000200                  bit07	=000200			;
      32        000400                  bit08	=000400			;
      33        001000                  bit09	=001000			;
      34        002000                  bit10	=002000			;
      35        004000                  bit11	=004000			;
      36        010000                  bit12	=010000			;
      37        020000                  bit13	=020000			;
      38        040000                  bit14	=040000			;
      39        100000                  bit15	=100000			;
      40                                	
      41        000001                  bit0	=bit00			; also
      42        000002                  bit1	=bit01			;
      43        000004                  bit2	=bit02			;
      44        000010                  bit3	=bit03			;
      45        000020                  bit4	=bit04			;
      46        000040                  bit5	=bit05			;
      47        000100                  bit6	=bit06			;
      48        000200                  bit7	=bit07			;
      49        000400                  bit8	=bit08			;
      50        001000                  bit9	=bit09			;
      51                                
      52                                ;================================================================================
      53                                ; end of bits.mac
      54                                ;================================================================================
      54                                
      12                                
      13                                ; --------------------------------------------------------------------------------
      14                                
      15                                .sbttl	low memory
      16                                
      17                                	.enabl	ama			; change all mode 67 references to 37
      18                                
      19 000000                         	.asect				; absolute load image
      20                                	
      21        000046                  	.=46
      22 000046 001450'                 	.word	$endad			; address of JSR PC,(R0)
      23        000052                  	.=52
      24 000052 000000                  	.word	0			; run options
      25                                
      26        000200                  	.=200
      27 000200 000137  000000'         	jmp	@#start			; standard diagnostic entry
      28                                
      29                                ; --------------------------------------------------------------------------------
      30                                
      31                                .sbttl	global variables
      32                                
      33 000000                         	.psect	stk
      34                                
      35        000000                  	.blkb	1776			; space for stack
      36 001776 177777                  stack:	.word	-1			; top of stack
      37                                
      38 000000                         	.psect	dat
      39                                
      40 000000 000000                  passes:	.word	0			; count passes
      41 000002 000000                  $sav42:	.word	0			; XXDP restart address
      42        000004                  bufptr:	.blkw	1.			; pointer into buffer
      43        000006                  buffer:	.blkb	800.			; print buffer
      44 001446    377                  	.byte	-1			; spacer
      45                                
      46                                ; --------------------------------------------------------------------------------
      47                                
      48                                .sbttl	program start
      49                                
      50 000000                         	.psect	prg
      51                                
      52 000000 012706  001776'         start::	mov	#stack,sp		; setup a stack
      53 000004 000005                  	reset				; reset the world
      54 000006 013737  000042  000002' 	mov	@#42,$sav42		; save XXDP restart
      55                                
      56 000014                         	trapcatcher <2,200,206,400>	; setup a trapcatcher in low vector space
       1 000014 012700  000044'         	mov	#32770$,r0    		; ptr to table
       2 000020 012001                  32768$:	mov	(r0)+,r1		; start addr
       3 000022 100415                  	bmi	32771$			; done?
       4 000024 012002                  	mov	(r0)+,r2		; end addr
       5 000026 010161  177776          32769$:	mov	r1,-2(r1)		; point vector at next word
       6 000032 005011                  	clr	(r1)			; <0> which is a halt
       7 000034 022121                  	cmp	(r1)+,(r1)+		; add four to ptr
       8 000036 020102                  	cmp	r1,r2			; reached end?
       9 000040 003772                  	ble	32769$			; not yet
      10 000042 000766                  	br	32768$			; more
      11 000044 000002  000200  000206  32770$:	.word	2,200,206,400, -1
         000052 000400  177777          
      12 000056 000240                  32771$:	nop				; placeholder
      57                                
      58 000060                           	printf	#msg1			; say hello
       1 000060                         	calls	printf #msg1               
       9 000060 012746  001506'         	mov	#msg1,-(sp)
       2 000064                         	call	printf
       1 000064 004737  000000G         	jsr	pc,printf
       3 000070 062706  000002          	add	#2,sp
      59 000074                          	printf	#crlf			;
       1 000074                         	calls	printf #crlf               
       9 000074 012746  001421'         	mov	#crlf,-(sp)
       2 000100                         	call	printf
       1 000100 004737  000000G         	jsr	pc,printf
       3 000104 062706  000002          	add	#2,sp
      60                                
      61 000110 005037  000000'         	clr	passes			;
      62                                
      63 000114 012700  010001          loop:	mov	#10001,r0
      64 000120 012701  021112          	mov	#21112,r1
      65 000124 012702  032223          	mov	#32223,r2
      66 000130 012703  043334          	mov	#43334,r3
      67 000134 012704  054445          	mov	#54445,r4
      68 000140 012705  065556          	mov	#65556,r5
      69 000144 012746  012345          	mov	#12345,-(sp)
      70 000150 012746  054321          	mov	#54321,-(sp)
      71                                	
      72 000154                         	printf	#740$,#710$
       1 000154                         	calls	printf #740$ #710$              
       9 000154 012746  001152'         	mov	#710$,-(sp)
      15 000160 012746  001407'         	mov	#740$,-(sp)
       2 000164                         	call	printf
       1 000164 004737  000000G         	jsr	pc,printf
       3 000170 062706  000004          	add	#4,sp
      73 000174                         	printf	#710$,r0,r1,r2,r3,r4,r5,sp,pc
       1 000174                         	calls	printf #710$ r0 r1 r2 r3 r4 r5 sp pc       
       9 000174 010746                  	mov	pc,-(sp)
      15 000176 010646                  	mov	sp,-(sp)
      21 000200 010546                  	mov	r5,-(sp)
      27 000202 010446                  	mov	r4,-(sp)
      33 000204 010346                  	mov	r3,-(sp)
      39 000206 010246                  	mov	r2,-(sp)
      45 000210 010146                  	mov	r1,-(sp)
      51 000212 010046                  	mov	r0,-(sp)
      57 000214 012746  001152'         	mov	#710$,-(sp)
       2 000220                         	call	printf
       1 000220 004737  000000G         	jsr	pc,printf
       3 000224 062706  000022          	add	#22,sp
      74 000230                         	printf	#crlf
       1 000230                         	calls	printf #crlf               
       9 000230 012746  001421'         	mov	#crlf,-(sp)
       2 000234                         	call	printf
       1 000234 004737  000000G         	jsr	pc,printf
       3 000240 062706  000002          	add	#2,sp
      75                                
      76 000244 020027  010001          	cmp	r0,#10001
      77 000250 001026                  	bne	10$
      78 000252 020127  021112          	cmp	r1,#21112
      79 000256 001023                  	bne	10$
      80 000260 020227  032223          	cmp	r2,#32223
      81 000264 001020                  	bne	10$
      82 000266 020327  043334          	cmp	r3,#43334
      83 000272 001015                  	bne	10$
      84 000274 020427  054445          	cmp	r4,#54445
      85 000300 001012                  	bne	10$
      86 000302 020527  065556          	cmp	r5,#65556
      87 000306 001007                  	bne	10$
      88 000310 022627  054321          	cmp	(sp)+,#54321
      89 000314 001004                  	bne	10$
      90 000316 022627  012345          	cmp	(sp)+,#12345
      91 000322 001001                  	bne	10$
      92 000324 000401                  	br	11$
      93 000326 000000                  10$:	halt	
      94 000330 000240                  11$:	nop
      95                                	
      96 000332 012700  010001          	mov	#10001,r0
      97 000336 012701  021112          	mov	#21112,r1
      98 000342 012702  032223          	mov	#32223,r2
      99 000346 012703  043334          	mov	#43334,r3
     100 000352 012704  054445          	mov	#54445,r4
     101 000356 012705  065556          	mov	#65556,r5
     102 000362 012746  012345          	mov	#12345,-(sp)
     103 000366 012746  054321          	mov	#54321,-(sp)
     104                                	
     105 000372                         	sprintf	#buffer,#740$,#710$
       1 000372                         	calls	sprintf #buffer #740$ #710$             
       9 000372 012746  001152'         	mov	#710$,-(sp)
      15 000376 012746  001407'         	mov	#740$,-(sp)
      21 000402 012746  000006'         	mov	#buffer,-(sp)
       2 000406                         	call	sprintf
       1 000406 004737  000000G         	jsr	pc,sprintf
       3 000412 062706  000006          	add	#6,sp
     106 000416                         	sprintf	r0,#710$,r0,r1,r2,r3,r4,r5,sp,pc
       1 000416                         	calls	sprintf r0 #710$ r0 r1 r2 r3 r4 r5 sp pc      
       9 000416 010746                  	mov	pc,-(sp)
      15 000420 010646                  	mov	sp,-(sp)
      21 000422 010546                  	mov	r5,-(sp)
      27 000424 010446                  	mov	r4,-(sp)
      33 000426 010346                  	mov	r3,-(sp)
      39 000430 010246                  	mov	r2,-(sp)
      45 000432 010146                  	mov	r1,-(sp)
      51 000434 010046                  	mov	r0,-(sp)
      57 000436 012746  001152'         	mov	#710$,-(sp)
      63 000442 010046                  	mov	r0,-(sp)
       2 000444                         	call	sprintf
       1 000444 004737  000000G         	jsr	pc,sprintf
       3 000450 062706  000024          	add	#24,sp
     107 000454                         	sprintf	r0,#crlf
       1 000454                         	calls	sprintf r0 #crlf              
       9 000454 012746  001421'         	mov	#crlf,-(sp)
      15 000460 010046                  	mov	r0,-(sp)
       2 000462                         	call	sprintf
       1 000462 004737  000000G         	jsr	pc,sprintf
       3 000466 062706  000004          	add	#4,sp
     108 000472                         	printf	#750$,#buffer
       1 000472                         	calls	printf #750$ #buffer              
       9 000472 012746  000006'         	mov	#buffer,-(sp)
      15 000476 012746  001416'         	mov	#750$,-(sp)
       2 000502                         	call	printf
       1 000502 004737  000000G         	jsr	pc,printf
       3 000506 062706  000004          	add	#4,sp
     109                                
     110                                	;cmp	r0,#10001
     111                                	;bne	20$
     112 000512 020127  021112          	cmp	r1,#21112
     113 000516 001023                  	bne	20$
     114 000520 020227  032223          	cmp	r2,#32223
     115 000524 001020                  	bne	20$
     116 000526 020327  043334          	cmp	r3,#43334
     117 000532 001015                  	bne	20$
     118 000534 020427  054445          	cmp	r4,#54445
     119 000540 001012                  	bne	20$
     120 000542 020527  065556          	cmp	r5,#65556
     121 000546 001007                  	bne	20$
     122 000550 022627  054321          	cmp	(sp)+,#54321
     123 000554 001004                  	bne	20$
     124 000556 022627  012345          	cmp	(sp)+,#12345
     125 000562 001001                  	bne	20$
     126 000564 000401                  	br	21$
     127 000566 000000                  20$:	halt	
     128 000570 000240                  21$:	nop
     129                                	
     130 000572                         	printf	#740$,#730$
       1 000572                         	calls	printf #740$ #730$              
       9 000572 012746  001323'         	mov	#730$,-(sp)
      15 000576 012746  001407'         	mov	#740$,-(sp)
       2 000602                         	call	printf
       1 000602 004737  000000G         	jsr	pc,printf
       3 000606 062706  000004          	add	#4,sp
     131 000612 012700  000062          	mov	#50.,r0
     132 000616 010001                  	mov	r0,r1
     133 000620 005401                  	neg	r1
     134 000622 006201                  	asr	r1
     135 000624 005002                  100$:	clr	r2
     136 000626 005701                  	tst	r1
     137 000630 100001                  	bpl	101$
     138 000632 005302                  	dec	r2
     139 000634                         101$:	printf	#730$,r0,r1,r1,r1,r1,r2,r1,r2,r1,r2,r1
       1 000634                         	calls	printf #730$ r0 r1 r1 r1 r1 r2 r1 r2 r1 r2 r1    
       9 000634 010146                  	mov	r1,-(sp)
      15 000636 010246                  	mov	r2,-(sp)
      21 000640 010146                  	mov	r1,-(sp)
      27 000642 010246                  	mov	r2,-(sp)
      33 000644 010146                  	mov	r1,-(sp)
      39 000646 010246                  	mov	r2,-(sp)
      45 000650 010146                  	mov	r1,-(sp)
      51 000652 010146                  	mov	r1,-(sp)
      57 000654 010146                  	mov	r1,-(sp)
      63 000656 010146                  	mov	r1,-(sp)
      69 000660 010046                  	mov	r0,-(sp)
      75 000662 012746  001323'         	mov	#730$,-(sp)
       2 000666                         	call	printf
       1 000666 004737  000000G         	jsr	pc,printf
       3 000672 062706  000030          	add	#30,sp
     140 000676 005201                  	inc	r1
     141 000700 005300                  	dec	r0
     142 000702 001350                  	bne	100$
     143                                
     144 000704                         	printf	#crlf
       1 000704                         	calls	printf #crlf               
       9 000704 012746  001421'         	mov	#crlf,-(sp)
       2 000710                         	call	printf
       1 000710 004737  000000G         	jsr	pc,printf
       3 000714 062706  000002          	add	#2,sp
     145 000720                         	printf	#740$,#600$
       1 000720                         	calls	printf #740$ #600$              
       9 000720 012746  001042'         	mov	#600$,-(sp)
      15 000724 012746  001407'         	mov	#740$,-(sp)
       2 000730                         	call	printf
       1 000730 004737  000000G         	jsr	pc,printf
       3 000734 062706  000004          	add	#4,sp
     146 000740 012704  000017          	mov	#15.,r4
     147 000744 012701  035141          200$:	mov	#<'a>+<':*bit8>,r1
     148 000750 012702  001114'         	mov	#601$,r2
     149 000754 010403                  	mov	r4,r3
     150 000756 001404                  	beq	202$
     151 000760 110122                  201$:	movb	r1,(r2)+
     152 000762 005201                  	inc	r1
     153 000764 005303                  	dec	r3
     154 000766 001374                  	bne	201$
     155 000770 105022                  202$:	clrb	(r2)+
     156 000772 012700  001114'         	mov	#601$,r0
     157 000776                         	printf	#600$,r1,r1,r4,r0,r0,r0,r0,r0
       1 000776                         	calls	printf #600$ r1 r1 r4 r0 r0 r0 r0 r0       
       9 000776 010046                  	mov	r0,-(sp)
      15 001000 010046                  	mov	r0,-(sp)
      21 001002 010046                  	mov	r0,-(sp)
      27 001004 010046                  	mov	r0,-(sp)
      33 001006 010046                  	mov	r0,-(sp)
      39 001010 010446                  	mov	r4,-(sp)
      45 001012 010146                  	mov	r1,-(sp)
      51 001014 010146                  	mov	r1,-(sp)
      57 001016 012746  001042'         	mov	#600$,-(sp)
       2 001022                         	call	printf
       1 001022 004737  000000G         	jsr	pc,printf
       3 001026 062706  000022          	add	#22,sp
     158 001032 005304                  	dec	r4
     159 001034 002343                  	bge	200$
     160                                
     161 001036 000137  001424'         	jmp	done			; all done
     162                                
     163 001042    045     143     072  600$:	.asciz	"%c:%d:%3d:%12.4s:%-12.4s:%12s:%-12s:%s:"<cr><lf>
         001045    045     144     072  
         001050    045     063     144  
         001053    072     045     061  
         001056    062     056     064  
         001061    163     072     045  
         001064    055     061     062  
         001067    056     064     163  
         001072    072     045     061  
         001075    062     163     072  
         001100    045     055     061  
         001103    062     163     072  
         001106    045     163     072  
         001111    015     012     000  
     164        001114                  601$:	.blkb	30.
     165 001152    056     056     122  710$:	.ascii	"..R0.. ..R1.. ..R2.. ..R3.. ..R4.. ..R5.. ..SP.. ..PC.."<cr><lf>
         001155    060     056     056  
         001160    040     056     056  
         001163    122     061     056  
         001166    056     040     056  
         001171    056     122     062  
         001174    056     056     040  
         001177    056     056     122  
         001202    063     056     056  
         001205    040     056     056  
         001210    122     064     056  
         001213    056     040     056  
         001216    056     122     065  
         001221    056     056     040  
         001224    056     056     123  
         001227    120     056     056  
         001232    040     056     056  
         001235    120     103     056  
         001240    056     015     012  
     166 001243    072     045     157  	.asciz	":%o:%#-12o:%+o:%#1o:%#02o:%03.4o:%#8.6o:%.7o:"<cr><lf>
         001246    072     045     043  
         001251    055     061     062  
         001254    157     072     045  
         001257    053     157     072  
         001262    045     043     061  
         001265    157     072     045  
         001270    043     060     062  
         001273    157     072     045  
         001276    060     063     056  
         001301    064     157     072  
         001304    045     043     070  
         001307    056     066     157  
         001312    072     045     056  
         001315    067     157     072  
         001320    015     012     000  
     167 001323    011     072     045  730$:	.asciz	"	:%4d:	%+05d	%2u	%#o	%#6x	%5ld	%lx       	%08.3lb"<cr><lf>
         001326    064     144     072  
         001331    011     045     053  
         001334    060     065     144  
         001337    011     045     062  
         001342    165     011     045  
         001345    043     157     011  
         001350    045     043     066  
         001353    170     011     045  
         001356    065     154     144  
         001361    011     045     154  
         001364    170     040     040  
         001367    040     040     040  
         001372    040     040     011  
         001375    045     060     070  
         001400    056     063     154  
         001403    142     015     012  
         001406    000                  
     168 001407    045     163     134  740$:	.asciz	"%s\r\n"
         001412    162     134     156  
         001415    000                  
     169 001416    045     163     000  750$:	.asciz	"%s"
     170 001421    015     012     000  crlf:	.asciz	<cr><lf>
     171                                	.even
     172                                
     173                                ; --------------------------------------------------------------------------------
     174                                
     175 001424                         done:	printf	#msg2			; say goodbye
       1 001424                         	calls	printf #msg2               
       9 001424 012746  001537'         	mov	#msg2,-(sp)
       2 001430                         	call	printf
       1 001430 004737  000000G         	jsr	pc,printf
       3 001434 062706  000002          	add	#2,sp
     176                                
     177 001440 013700  000002'         	mov	$sav42,r0		; check if loaded by XXDP
     178 001444 001407                  	beq	noxxdp			; br if not
     179 001446 000005                  	reset				; yes, reset the world
     180 001450 004710                  $endad:	jsr	pc,(r0)			; return back to XXDP
     181 001452 000240                  	nop				; standard sequence
     182 001454 000240                  	nop				;
     183 001456 000240                  	nop				;
     184 001460 000137  000114'         	jmp	loop			; back for more
     185                                
     186 001464 005000                  noxxdp:	clr	r0			;
     187 001466 005300                  10$:	dec	r0			; 
     188 001470 001376                  	bne	10$			; some delay
     189 001472 000005                  	reset				; zap the world
     190 001474 012746  000340          	mov	#<7>*bit5,-(sp)		; prio7 in psw
     191 001500 012746  165144          	mov	#console,-(sp)		; go there
     192 001504 000002                  	rti				; reload psw
     193                                
     194 001506    015     012     015  msg1:	.asciz	<cr><lf><cr><lf>"PRINTF Tester v1.1"<cr><lf>
         001511    012     120     122  
         001514    111     116     124  
         001517    106     040     124  
         001522    145     163     164  
         001525    145     162     040  
         001530    166     061     056  
         001533    061     015     012  
         001536    000                  
     195 001537    015     012     107  msg2:	.asciz	<cr><lf>"Goodbye"<cr><lf>
         001542    157     157     144  
         001545    142     171     145  
         001550    015     012     000  
     196                                
     197                                .end	start
     197                                


Symbol table

$$NUM  =000002           32769$0 000026R  L   004 BIT05  =000040           BIT5   =000040           MSG2    001537R      004 
$ENDAD  001450R      004 32770$0 000044R  L   004 BIT06  =000100           BIT6   =000100           NOXXDP  001464R      004 
$SAV42  000002R      003 32771$0 000056R  L   004 BIT07  =000200           BIT7   =000200           PASSES  000000R      003 
.       ******R      004 600$1   001042R  L   004 BIT08  =000400           BIT8   =000400           PRINTF =****** GX        
10$1    000326R  L   004 601$1   001114R  L   004 BIT09  =001000           BIT9   =001000           PSW    =177776 G         
10$2    001466R  L   004 710$1   001152R  L   004 BIT1   =000002           BUFFER  000006R      003 SPRINT =****** GX        
100$1   000624R  L   004 730$1   001323R  L   004 BIT10  =002000           BUFPTR  000004R      003 STACK   001776R      002 
101$1   000634R  L   004 740$1   001407R  L   004 BIT11  =004000           CONSOL =165144 G         START   000000RG     004 
11$1    000330R  L   004 750$1   001416R  L   004 BIT12  =010000           CR     =000015           SWIREG =177570 G         
20$1    000566R  L   004 BIT0   =000001           BIT13  =020000           CRLF    001421R      004 TST$NO =000001           
200$1   000744R  L   004 BIT00  =000001           BIT14  =040000           DONE    001424R      004 TTRBUF =177562 G         
201$1   000760R  L   004 BIT01  =000002           BIT15  =100000           DPYREG =177570 G         TTRCSR =177560 G         
202$1   000770R  L   004 BIT02  =000004           BIT2   =000004           LF     =000012           TTXBUF =177566 G         
21$1    000570R  L   004 BIT03  =000010           BIT3   =000010           LOOP    000114R      004 TTXCSR =177564 G         
32768$0 000020R  L   004 BIT04  =000020           BIT4   =000020           MSG1    001506R      004 


Program sections:

. ABS.  000204    000   (RW,I,GBL,ABS,OVR,NOSAV)
        000000    001   (RW,I,LCL,REL,CON,NOSAV)
STK     002000    002   (RW,I,LCL,REL,CON,NOSAV)
DAT     001447    003   (RW,I,LCL,REL,CON,NOSAV)
PRG     001553    004   (RW,I,LCL,REL,CON,NOSAV)
