       1                                	.title	M9312 'DX' BOOT prom for RX11 compatible controller
       2                                
       3                                	; This source code is an exact copy of the DEC M9312 23-753A9 boot PROM.
       4                                	;
       5                                	; This boot PROM is for any RX11/RX01 compatible floppy controller.
       6                                	;
       7                                	; Multiple units and/or CSR addresses are supported via different entry points.
       8                                	;
       9                                	; Standard devices are 82S131, Am27S13, 74S571 or other compatible bipolar
      10                                	; PROMs with a 512x4 TriState 16pin DIP architecture. This code resides in
      11                                	; the low half of the device; the top half is blank and unused.
      12                                	;
      13                                	; Alternatively, 82S129 compatible 256x4 TriState 16pin DIP devices can be
      14                                	; used, as the uppermost address line (hardwired low) is an active low chip
      15                                	; select (and will be correctly asserted low).
      16                                
      17        177170                  rxcsr	=177170				; std RX11 csrbase
      18                                
      19        000000                  rxcs	=+0				; command/status
      20        000002                  rxdb	=+2				; data buffer
      21                                
      22        165564                  diags	=165564				; console diags phase2 entry
      23                                
      24 000000                         	.asect
      25        173000                  	.=173000
      26                                
      27                                ; VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
      28                                
      29        000200                  	.=200				; standard entry point
      30 000200 000137  003000          begin:	jmp	@#enter			;
      31                                	
      32        001776                  	.=1776				; top of stack
      33 001776 177777                  stack:	.word	-1			;
      34                                
      35        003000                  	.=3000				; program base address
      36 003000 000005                  enter:	reset				; init cpu
      37 003002 005000                  	clr	r0			; zap registers
      38 003004 005001                  	clr	r1			;
      39 003006 005002                  	clr	r2			;
      40 003010 005003                  	clr	r3			;
      41 003012 005004                  	clr	r4			;
      42 003014 005005                  	clr	r5			; 
      43 003016 012706  001776          	mov	#stack,sp		; setup a stack
      44 003022 000137  004004          	jmp	@#dx0n			; execute boot
      45                                
      46        004000                  	.=4000				; code base
      47                                
      48                                ; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
      49                                
      50                                	; --------------------------------------------------
      51                                
      52 004000    130     104          start:	.ascii	"XD"			; device code (reversed)
      53                                                                                     
      54 004002 000176                  	.word	last-.			; offset to next boot header
      55                                
      56 004004 000261                  dx0n:	sec				; boot std csr, unit zero, no diags
      57 004006 012700  000000          dx0d:	mov	#0,r0			; boot std csr, unit zero, with diags
      58 004012 012701  177170          dxNr:	mov	#rxcsr,r1		; boot std csr, unit <R0>
      59 004016 010704                  dxNb:	mov	pc,r4			; boot csr <R1>, unit <R0>
      60 004020 103056                  	bcc	diag			; br if diags requested
      61 004022 000402                  	br	go			; return to (R4)+2 from diags
      62                                					; then skip over pseudo reboot vector
      63                                
      64                                	; --------------------------------------------------
      65                                
      66 004024 173000                  	.word	173000			; prom start addess @ 24
      67 004026 000340                  	.word	340			; and priority level @ 26
      68                                
      69                                	; --------------------------------------------------
      70                                
      71 004030 000241                  go:	clc				; clear carry
      72 004032 012703  001407          	mov	#<003*400>+007,r3	; unit zero, read+go
      73 004036 132700  000001          	bitb	#1,r0			; test unit ID
      74 004042 001402                  	beq	2$			; br if zero
      75 004044 012703  011427          	mov	#<023*400>+027,r3	; unit one, read+go
      76                                
      77 004050 132711  100040          2$:	bitb	#100040,(r1)		; test error<15> or done<5>
      78 004054 001775                  	beq	2$			; neither, keep looping
      79                                
      80 004056 110311                  	movb	r3,(r1)			; exec read+go on unit
      81                                
      82 004060 111105                  3$:	movb	(r1),r5			; wait for transfer req
      83 004062 100376                  	bpl	3$			; not yet, keep looping
      84                                
      85 004064 112761  000001  000002  	movb	#1,rxdb(r1)		; set track/sector 1
      86 004072 106003                  	rorb	r3			; 007 -> 003 -> 001 -> 000
      87 004074 102771                  	bvs	3$			; loop three times
      88                                
      89 004076 032711  100040          4$:	bit	#100040,(r1)		; test error<15> or done<5>
      90 004102 001775                  	beq	4$			; neither, keep looping
      91 004104 100412                  	bmi	6$			; br if error
      92                                
      93 004106 000303                  	swab	r3			; R3=003/023 unit0/1
      94 004110 110311                  	movb	r3,(r1)			; exec emptybuf+go on unit
      95                                
      96 004112 005003                  	clr	r3			; bus address ptr
      97 004114 105711                  5$:	tstb	(r1)			; wait for data transfer req
      98 004116 100376                  	bpl	5$			; loop if not yet
      99 004120 116123  000002          	movb	rxdb(r1),(r3)+		; store data byte
     100 004124 105703                  	tstb	r3			; check address >= 128
     101 004126 100372                  	bpl	5$			; br if address in 0..127
     102                                
     103 004130 005007                  	clr	pc			; jump to bootstrap at zero
     104                                
     105 004132 000005                  6$:	reset				; failed, reset controller
     106 004134 000164  000002          	jmp	2(r4)			; and retry from the beginning
     107                                
     108                                	; --------------------------------------------------
     109                                
     110 004140 012700  000001          dx1n:	mov	#1,r0			; boot std csr, unit one, no diags
     111 004144 000261                  	sec				;
     112 004146 000721                  	br	dxNr			; continue
     113                                
     114 004150 012700  000001          dx1d:	mov	#1,r0			; boot std csr, unit one, ? diags
     115 004154 000716                  	br	dxNr			; continue
     116                                
     117                                	; --------------------------------------------------
     118                                
     119 004156 000137  165564          diag:	jmp	@#diags			; jump to console diags
     120                                
     121                                	; --------------------------------------------------
     122                                
     123 004162 000000  000000  000000  	.word	0,0,0,0,0,0		; unused
         004170 000000  000000  000000  
     124                                
     125                                	; --------------------------------------------------
     126                                
     127        004176                  	.=start+176
     128 004176 105572                  crc16:	.word	<105572>		; CRC-16 will go here
     129                                
     130                                last:	; next boot prom starts here
     131                                
     132                                	.end
     132                                


Symbol table

.     = 004200           6$0   = 004132   L       DX0D  = 004006           DXNR  = 004012           RXCSR = 177170           
2$0   = 004050   L       BEGIN = 000200           DX0N  = 004004           ENTER = 003000           RXDB  = 000002           
3$0   = 004060   L       CRC16 = 004176           DX1D  = 004150           GO    = 004030           STACK = 001776           
4$0   = 004076   L       DIAG  = 004156           DX1N  = 004140           LAST  = 004200           START = 004000           
5$0   = 004114   L       DIAGS = 165564           DXNB  = 004016           RXCS  = 000000           


Program sections:

. ABS.  173000    000   (RW,I,GBL,ABS,OVR,NOSAV)
        000000    001   (RW,I,LCL,REL,CON,NOSAV)
